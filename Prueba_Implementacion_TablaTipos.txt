#************* Prueba MP-02 Implementación de Tabla de Simbolos, Validacion de niveles de identificadores y definicion de metodos con el mismo identificador *************

x = 123
y = "456"
w = [1,2,3,4]
x = 321

def funcion():
    z = 789
    print(z)
z = "hola"

x = "hola"

def funcion():
    z = "20"

#************* Prueba MP-03 llamadas a funciones  *************

funcionUno():
    print("funcionUno")

funcionUno()

funcionDos():
    funcionUno()
    print("funcionDos")

funcionTres()


#************* Prueba MP-04 Inferencia de Tipos  *************

#Inferencia de tipos en scopes diferentes

a = 123
a = "123" #Error de tipos

def fun1():
    a = 123
    a = "123"  #Error de Tipos

b = "123"
c = '1'
d = [1,2,3]
e = [1,'2',"3"] #Error de Tipos en la lista


#************* Prueba MP-05 Inferencia de Tipos en expresiones  *************

#Verificacion de tipos en expresiones

x = 123
y = [1,2,3]

concat1 = "hola " + "mundo"
concat2 = "hola " + 123
concat3 = "hola " + 'a'

mulOk = x* y[0]
mulError = 123 * "asd"

def fun1():
    a = 'a'
    b = 'b'
    if (a < b):
        print("a es menor que b")
    else:
        print("a es mayor que b")

    if (5 > 10):
        print("5 es mayor que 10")
    else:
        print("5 es menor que 10")

    if(a == 5):                    #Error de tipos los 2 deben ser enteros o char
        print("a es igual a 5")
    else:
        print("a no es igual a 5")

    if("a" == "5"):                    #Error de tipos solo pueden ser o enteros o char
        print("a es igual a 5")
    else:
        print("a no es igual a 5")



#************* Prueba MP-06 Uso de métodos  *************

x = 10

def fun1():
    return "20"

concat = x + fun1()

mult = x * fun1()


#************* Prueba MP-07 Expresiones Complejas  *************

exp = 10 + (20 * 5 ) + ( "suma" * 't') / (50-10)

#************* Prueba Correcta Enviada por el profesor *************
MIN = -1
TRUE = 1
FALSE = 0

#Calcular factorial
def calcularFac(num):
    num_aux = 0
    if (num < 1):
        num_aux = MIN
    else:
        num_aux = num * (calcularFac(num-1))
    return num_aux

ventas = [100,200,300,400,500]
print(len(ventas)+1)

#promedio de elementos
def promedio(cualquier_arreglo):
    tam = len(cualquier_arreglo)
    resultado=0
    #ciclo para recorrer arreglo
    cont = 0
    sumatoria = 0
    while (cont <= tam-1):
        sumatoria = sumatoria + cualquier_arreglo[cont]
        cont = cont + 1
    if tam > 0:
        resultado = sumatoria / tam

    return resultado

def calcularpromedioventas():
    prom = promedio(ventas)
    print("El promedio de las ventas es: ")
    print(prom)

def temp(a,b):
    if (0==0):
        x=10
    y = 1 + b
    if (0==0):
        return TRUE
    else:
        return 0

temp(1,2)
z = ventas[2]
print("Calculo del Factorial: ")
print(calcularFac(6))

calcularpromedioventas()